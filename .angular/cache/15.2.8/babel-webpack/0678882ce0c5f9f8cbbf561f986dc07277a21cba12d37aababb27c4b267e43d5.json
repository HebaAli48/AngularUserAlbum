{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UsersComponent = class UsersComponent {\n  constructor(UService, router) {\n    this.UService = UService;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl('', [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl('', Validators.required),\n      suite: new FormControl('', Validators.required),\n      city: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n  }\n  ngOnInit() {\n    this.UService.GetAllUsers().subscribe({\n      next: data => {\n        console.log(data);\n        this.users = data;\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  clickUpdate(x) {\n    console.log(x);\n    // this.UService.GetUserByID(this.ID).subscribe({\n    //   next:(data:Object)=>{\n    //     // console.log(data)\n    //     this.user = data;\n    //     this.myValidation.setValue({\n    //       name: this.user.name,\n    //       email: this.user.email,\n    //       phone: this.user.phone,\n    //       street: this.user.address.street,\n    //       suite: this.user.address.suite,\n    //       city: this.user.address.city\n    //     });\n    //   },\n    //   error:(err)=>{console.log(err)}\n    // });\n  }\n\n  update(name, email, phone, street, suite, city, e) {\n    // console.log(e);\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      this.user = newUser;\n      // this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\");\n    }\n  }\n  add(name, email, phone, street, suite, city) {\n    // console.log(this.users);\n    let id = this.users[this.users.length - 1].id + 1;\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      id,\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      // this.myEvent.emit(newUser)\n      this.users.push(newUser);\n      // this.UService. AddUser(newUser).subscribe();\n      this.router.navigateByUrl('/users');\n    }\n  }\n  get NameValid() {\n    if (this.myValidation.controls['name'].value !== '') {\n      return this.myValidation.controls['name'].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls['phone'].value !== '') {\n      return this.myValidation.controls['phone'].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls['email'].value !== '') {\n      return this.myValidation.controls['email'].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls['street'].value !== '') {\n      return this.myValidation.controls['street'].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls['suite'].value !== '') {\n      return this.myValidation.controls['suite'].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls['city'].value !== '') {\n      return this.myValidation.controls['city'].valid;\n    }\n    return true;\n  }\n};\nUsersComponent = __decorate([Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styles: []\n})], UsersComponent);\nexport { UsersComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UsersComponent","constructor","UService","router","name","required","pattern","email","phone","street","suite","city","ngOnInit","GetAllUsers","subscribe","next","data","console","log","users","error","err","clickUpdate","x","update","e","address","newUser","myValidation","valid","user","navigateByUrl","add","id","length","push","NameValid","controls","value","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selector","templateUrl","styles"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\users\\users.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UsersService } from 'src/app/services/users.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styles: [\n  ]\n})\nexport class UsersComponent implements OnInit {\n  ID:any;\n  user:any;\n  constructor( public UService:UsersService,public router: Router){}\n    users:any;\n  ngOnInit(): void {\n        this.UService.GetAllUsers().subscribe({\n      next:(data)=>{\n        console.log(data)\n        this.users = data;\n      },\n      error:(err)=>{console.log(err)}\n    })\n  }\n  clickUpdate(x:any){\n    console.log(x);\n    \n    // this.UService.GetUserByID(this.ID).subscribe({\n    //   next:(data:Object)=>{\n    //     // console.log(data)\n    //     this.user = data;\n    //     this.myValidation.setValue({\n    //       name: this.user.name,\n    //       email: this.user.email,\n    //       phone: this.user.phone,\n    //       street: this.user.address.street,\n    //       suite: this.user.address.suite,\n    //       city: this.user.address.city\n    //     });\n\n    //   },\n    //   error:(err)=>{console.log(err)}\n    // });\n  }\n\n  update(name:any, email:any, phone:any, street:any,suite:any, city:any,e:any){\n    // console.log(e);\n   \n    let address={street,suite,city};\n    let newUser = {name, email, phone, address};\n    if(this.myValidation.valid){\n        this.user=newUser\n      // this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\")\n      }\n\n      \n  }\n\n\n\n\n\n\n  add(name: any, email: any, phone: any, street: any, suite: any, city: any) {\n    // console.log(this.users);\n\n  let id=(this.users[this.users.length-1].id) +1\n\n    let address = { street, suite, city };\n    let newUser = {id,name, email, phone, address };\n    if (this.myValidation.valid) {\n      // this.myEvent.emit(newUser)\n      this.users.push(newUser);\n      \n      // this.UService. AddUser(newUser).subscribe();\n      this.router.navigateByUrl('/users');\n    }\n  }\n\n\n\n\n\n\n  myValidation = new FormGroup({\n    name: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/[a-zA-Z]+/),\n    ]),\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/),\n    ]),\n    phone: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^[0-9]+$/),\n    ]),\n    street: new FormControl('', Validators.required),\n    suite: new FormControl('', Validators.required),\n    city: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/[a-zA-Z]+/),\n    ]),\n  });\n  get NameValid() {\n    if (this.myValidation.controls['name'].value !== '') {\n      return this.myValidation.controls['name'].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls['phone'].value !== '') {\n      return this.myValidation.controls['phone'].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls['email'].value !== '') {\n      return this.myValidation.controls['email'].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls['street'].value !== '') {\n      return this.myValidation.controls['street'].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls['suite'].value !== '') {\n      return this.myValidation.controls['suite'].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls['city'].value !== '') {\n      return this.myValidation.controls['city'].valid;\n    }\n    return true;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}