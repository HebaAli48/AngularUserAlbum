{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(DService, FormBuilder, http, router) {\n    this.DService = DService;\n    this.http = http;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl('', [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl('', Validators.required),\n      suite: new FormControl('', Validators.required),\n      city: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n  }\n  // Set the userDatavariable in the DataService\n  ngOnInit() {}\n  add(name, email, phone, street, suite, city) {\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    this.http.get('https://jsonplaceholder.typicode.com/users').subscribe(res => {\n      const user = res.find(a => {\n        return a.name === this.myValidation.value.name && a.email === this.myValidation.value.email;\n      });\n      console.log(user);\n      if (user) {\n        // if(this.loginForm.value.name==\"Leanne Graham\"&&this.loginForm.value.email==\"Sincere@april.biz\"){\n        //   alert (\"Login Success WELCOME ADMIN ^_^\");\n        //   this.loginForm.reset();\n        //   this.router.navigate(['users'])\n        // }\n        // else{\n        alert('user is already exists ,please login Again');\n        // this.loginForm.reset();\n        this.router.navigateByUrl('/login');\n      }\n      // else if(this.myValidation.value.name==\"\"||this.loginForm.value.email==\"\" ){\n      //   alert (\" Name and email are required !! please login again\");\n      //   this.router.navigateByUrl(\"/login\");\n      // }\n      else {\n        alert('welcome New User  !! please signin');\n        if (this.myValidation.valid) {\n          this.DService.userData.name = newUser.name;\n          this.DService.userData.email = newUser.email;\n          this.DService.userData.phone = newUser.phone;\n          this.DService.userData.address.street = newUser.name.adress.street;\n          this.DService.userData.address.suite = newUser.name.adress.suite;\n          this.DService.userData.address.city = newUser.name.adress.city;\n        }\n        this.router.navigateByUrl('/login');\n      }\n    }, err => {\n      alert('Something Went Wrong !!');\n    });\n  }\n  get NameValid() {\n    if (this.myValidation.controls['name'].value !== '') {\n      return this.myValidation.controls['name'].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls['phone'].value !== '') {\n      return this.myValidation.controls['phone'].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls['email'].value !== '') {\n      return this.myValidation.controls['email'].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls['street'].value !== '') {\n      return this.myValidation.controls['street'].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls['suite'].value !== '') {\n      return this.myValidation.controls['suite'].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls['city'].value !== '') {\n      return this.myValidation.controls['city'].valid;\n    }\n    return true;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","DService","FormBuilder","http","router","name","required","pattern","email","phone","street","suite","city","ngOnInit","add","address","newUser","get","subscribe","res","user","find","a","myValidation","value","console","log","alert","navigateByUrl","valid","userData","adress","err","NameValid","controls","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n  FormBuilder,\r\n} from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { UsersService } from 'src/app/services/users.service';\r\nimport { DataService } from 'src/app/services/data.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css'],\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  constructor(\r\n    public DService: DataService,\r\n    FormBuilder,\r\n    private http: HttpClient,\r\n    public router: Router\r\n  ) {}\r\n  // Set the userDatavariable in the DataService\r\n\r\n  ngOnInit(): void {}\r\n  add(name: any, email: any, phone: any, street: any, suite: any, city: any) {\r\n    let address = { street, suite, city };\r\n    let newUser = { name, email, phone, address };\r\n\r\n    this.http.get<any>('https://jsonplaceholder.typicode.com/users').subscribe(\r\n      (res) => {\r\n        const user = res.find((a: any) => {\r\n          return (\r\n            a.name === this.myValidation.value.name &&\r\n            a.email === this.myValidation.value.email\r\n          );\r\n        });\r\n        console.log(user);\r\n\r\n        if (user) {\r\n          // if(this.loginForm.value.name==\"Leanne Graham\"&&this.loginForm.value.email==\"Sincere@april.biz\"){\r\n          //   alert (\"Login Success WELCOME ADMIN ^_^\");\r\n          //   this.loginForm.reset();\r\n          //   this.router.navigate(['users'])\r\n          // }\r\n          // else{\r\n          alert('user is already exists ,please login Again');\r\n          // this.loginForm.reset();\r\n          this.router.navigateByUrl('/login');\r\n        }\r\n\r\n        // else if(this.myValidation.value.name==\"\"||this.loginForm.value.email==\"\" ){\r\n        //   alert (\" Name and email are required !! please login again\");\r\n        //   this.router.navigateByUrl(\"/login\");\r\n\r\n        // }\r\n        else {\r\n          alert('welcome New User  !! please signin');\r\n          if (this.myValidation.valid) {\r\n            this.DService.userData.name = newUser.name;\r\n            this.DService.userData.email = newUser.email;\r\n            this.DService.userData.phone = newUser.phone;\r\n            this.DService.userData.address.street = newUser.name.adress.street;\r\n            this.DService.userData.address.suite = newUser.name.adress.suite;\r\n            this.DService.userData.address.city = newUser.name.adress.city;\r\n          }\r\n          this.router.navigateByUrl('/login');\r\n        }\r\n      },\r\n      (err) => {\r\n        alert('Something Went Wrong !!');\r\n      }\r\n    );\r\n  }\r\n  myValidation = new FormGroup({\r\n    name: new FormControl('', [\r\n      Validators.required,\r\n      Validators.pattern(/[a-zA-Z]+/),\r\n    ]),\r\n    email: new FormControl('', [\r\n      Validators.required,\r\n      Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/),\r\n    ]),\r\n    phone: new FormControl('', [\r\n      Validators.required,\r\n      Validators.pattern(/^[0-9]+$/),\r\n    ]),\r\n    street: new FormControl('', Validators.required),\r\n    suite: new FormControl('', Validators.required),\r\n    city: new FormControl('', [\r\n      Validators.required,\r\n      Validators.pattern(/[a-zA-Z]+/),\r\n    ]),\r\n  });\r\n  get NameValid() {\r\n    if (this.myValidation.controls['name'].value !== '') {\r\n      return this.myValidation.controls['name'].valid;\r\n    }\r\n    return true;\r\n  }\r\n  get PhoneValid() {\r\n    if (this.myValidation.controls['phone'].value !== '') {\r\n      return this.myValidation.controls['phone'].valid;\r\n    }\r\n    return true;\r\n  }\r\n  get MailValid() {\r\n    if (this.myValidation.controls['email'].value !== '') {\r\n      return this.myValidation.controls['email'].valid;\r\n    }\r\n    return true;\r\n  }\r\n  get StreetValid() {\r\n    if (this.myValidation.controls['street'].value !== '') {\r\n      return this.myValidation.controls['street'].valid;\r\n    }\r\n    return true;\r\n  }\r\n  get SuiteValid() {\r\n    if (this.myValidation.controls['suite'].value !== '') {\r\n      return this.myValidation.controls['suite'].valid;\r\n    }\r\n    return true;\r\n  }\r\n  get CityValid() {\r\n    if (this.myValidation.controls['city'].value !== '') {\r\n      return this.myValidation.controls['city'].valid;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}