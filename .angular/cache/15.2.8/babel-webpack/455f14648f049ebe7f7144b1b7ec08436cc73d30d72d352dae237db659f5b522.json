{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UpdateUserComponent = class UpdateUserComponent {\n  // @Input() student:any;\n  constructor(myRoute, UService, router) {\n    this.UService = UService;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl(\"\", [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl(\"\", [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl(\"\", Validators.required),\n      suite: new FormControl(\"\", Validators.required),\n      city: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n    this.ID = myRoute.snapshot.params[\"id\"];\n    console.log(myRoute.snapshot.params[\"id\"]);\n  }\n  ngOnInit() {\n    this.UService.GetUserByID(this.ID).subscribe({\n      next: data => {\n        // console.log(data)\n        this.user = data;\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  update(name, email, phone, street, suite, city, e) {\n    // console.log(e);\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      this.UService.UpdateUser(this.ID, newUser).subscribe();\n      this.router.navigateByUrl(\"/users\");\n    }\n  }\n  get NameValid() {\n    if (this.myValidation.controls[\"name\"].value !== \"\") {\n      return this.myValidation.controls[\"name\"].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls[\"phone\"].value !== \"\") {\n      return this.myValidation.controls[\"phone\"].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls[\"email\"].value !== \"\") {\n      return this.myValidation.controls[\"email\"].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls[\"street\"].value !== \"\") {\n      return this.myValidation.controls[\"street\"].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls[\"suite\"].value !== \"\") {\n      return this.myValidation.controls[\"suite\"].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls[\"city\"].value !== \"\") {\n      return this.myValidation.controls[\"city\"].valid;\n    }\n    return true;\n  }\n};\nUpdateUserComponent = __decorate([Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html',\n  styles: []\n})], UpdateUserComponent);\nexport { UpdateUserComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UpdateUserComponent","constructor","myRoute","UService","router","name","required","pattern","email","phone","street","suite","city","ID","snapshot","params","console","log","ngOnInit","GetUserByID","subscribe","next","data","user","error","err","update","e","address","newUser","myValidation","valid","UpdateUser","navigateByUrl","NameValid","controls","value","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selector","templateUrl","styles"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\update-user\\update-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UsersService } from 'src/app/services/users.service';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html',\n  styles: [\n  ]\n})\nexport class UpdateUserComponent implements OnInit {\n  ID:any;\n  user:any;\n  // @Input() student:any;\n  constructor(myRoute:ActivatedRoute,public UService: UsersService, public router:Router){\n    this.ID = myRoute.snapshot.params[\"id\"];\n\n    console.log(myRoute.snapshot.params[\"id\"]);\n\n    \n  }\n \n  ngOnInit(): void {\n\n    this.UService.GetUserByID(this.ID).subscribe({\n      next:(data)=>{\n        // console.log(data)\n        this.user = data;\n      },\n      error:(err)=>{console.log(err)}\n    });\n  }\n  update(name:any, email:any, phone:any, street:any,suite:any, city:any,e:any){\n    // console.log(e);\n    \n    let address={street,suite,city};\n    let newUser = {name, email, phone, address};\n    if(this.myValidation.valid){\n\n      this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\")\n      }\n  }\n  \n  myValidation=new FormGroup({\n    name:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n    email:new FormControl(\"\",[Validators.required,Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n    phone:new FormControl(\"\",[Validators.required,Validators.pattern( /^[0-9]+$/)]),\n    street:new FormControl(\"\",Validators.required),\n    suite:new FormControl(\"\",Validators.required),\n    city:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n  \n  })\n  get NameValid(){\n    if((this.myValidation.controls[\"name\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"name\"].valid))\n     \n    }\n     return true\n  }\n  get PhoneValid(){\n    if((this.myValidation.controls[\"phone\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"phone\"].valid))\n     \n    }\n     return true\n  }\n  get MailValid(){\n    if((this.myValidation.controls[\"email\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"email\"].valid))\n     \n    }\n     return true\n  }\n  get StreetValid(){\n    if((this.myValidation.controls[\"street\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"street\"].valid))\n     \n    }\n     return true\n  }\n  get SuiteValid(){\n    if((this.myValidation.controls[\"suite\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"suite\"].valid))\n     \n    }\n     return true\n  }\n  get CityValid(){\n    if((this.myValidation.controls[\"city\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"city\"].valid))\n     \n    }\n     return true}\n  \n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}