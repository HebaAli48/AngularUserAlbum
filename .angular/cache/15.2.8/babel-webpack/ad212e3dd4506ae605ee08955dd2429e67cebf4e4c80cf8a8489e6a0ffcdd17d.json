{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, http, router) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl(\"\", [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl(\"\", [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl(\"\", Validators.required),\n      suite: new FormControl(\"\", Validators.required),\n      city: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      name: [''],\n      email: ['']\n    });\n  }\n  login() {\n    this.http.get(\"http://localhost:3000/users\").subscribe(res => {\n      const user = res.find(a => {\n        return a.name === this.loginForm.value.name && a.email === this.loginForm.value.email;\n      });\n      console.log(user);\n      if (user) {\n        alert(\"Login Success !!\");\n        this.loginForm.reset();\n        this.router.navigate(['users']);\n      } else {\n        alert(\"User Not Found !! please signup\");\n        this.router.navigateByUrl(\"/register\");\n      }\n    }, err => {\n      alert(\"Something Went Wrong !!\");\n    });\n  }\n  onSubmit(form) {\n    const user = {\n      name: form.value.name,\n      email: form.value.email\n    };\n    this.http.get('http://localhost:3000/users').subscribe(res => {\n      console.log(res);\n      form.reset();\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":"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","names":["Component","FormGroup","FormControl","Validators","LoginComponent","constructor","formBuilder","http","router","name","required","pattern","email","phone","street","suite","city","ngOnInit","loginForm","group","login","get","subscribe","res","user","find","a","value","console","log","alert","reset","navigate","navigateByUrl","err","onSubmit","form","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder,FormControl,Validators } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { style } from '@angular/animations';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  public loginForm !: FormGroup;\n  constructor (private formBuilder : FormBuilder, private http : HttpClient, private router : Router){}\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      name : [''],\n      email : ['']\n    })\n  }\n\n  login(){\n    this.http.get<any>(\"http://localhost:3000/users\")\n    .subscribe(res=>{\n      const user = res.find((a:any)=>{\n        return a.name === this.loginForm.value.name &&  a.email === this.loginForm.value.email\n      })\n      console.log(user);\n      \n      if(user){\n        alert (\"Login Success !!\");\n        this.loginForm.reset();\n        this.router.navigate(['users'])\n      } \n      else{\n\n        alert (\"User Not Found !! please signup\");\n        this.router.navigateByUrl(\"/register\")\n\n      }\n    },err=>{\n      alert (\"Something Went Wrong !!\")\n    })\n  }\n\n  onSubmit(form: NgForm) {\n    const user = {\n      name: form.value.name,\n      email: form.value.email,\n    };\n    this.http.get('http://localhost:3000/users')\n      .subscribe(res => {\n        console.log(res);\n        form.reset();\n      });\n  }\n  myValidation=new FormGroup({\n    name:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n    email:new FormControl(\"\",[Validators.required,Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n    phone:new FormControl(\"\",[Validators.required,Validators.pattern( /^[0-9]+$/)]),\n    street:new FormControl(\"\",Validators.required),\n    suite:new FormControl(\"\",Validators.required),\n    city:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n  \n  })\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}