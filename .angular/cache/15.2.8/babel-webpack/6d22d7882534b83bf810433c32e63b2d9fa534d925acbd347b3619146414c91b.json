{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/users.service\";\nexport class UpdateUserComponent {\n  // @Input() student:any;\n  constructor(myRoute, UService, router) {\n    this.UService = UService;\n    this.router = router;\n    this.ID = myRoute.snapshot.params[\"id\"];\n    // console.log(myRoute.snapshot.params[\"id\"]);\n  }\n\n  ngOnInit() {\n    this.UService.GetUserByID(this.ID).subscribe({\n      next: data => {\n        // console.log(data)\n        this.user = data;\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  update(name, email, phone, street, suite, city, e) {\n    // console.log(e);\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    // if(this.myValidation.valid){\n    this.UService.UpdateUser(this.ID, newUser).subscribe();\n    this.router.navigateByUrl(\"/users\");\n    // }\n  }\n}\n\nUpdateUserComponent.ɵfac = function UpdateUserComponent_Factory(t) {\n  return new (t || UpdateUserComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i1.Router));\n};\nUpdateUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateUserComponent,\n  selectors: [[\"app-update-user\"]],\n  decls: 0,\n  vars: 0,\n  template: function UpdateUserComponent_Template(rf, ctx) {},\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;AAYA,OAAM,MAAOA,mBAAmB;EAa9B;EACAC,YAAYC,OAAsB,EAAQC,QAAsB,EAASC,MAAa;IAA5C,aAAQ,GAARD,QAAQ;IAAuB,WAAM,GAANC,MAAM;IAC7E,IAAI,CAACC,EAAE,GAAGH,OAAO,CAACI,QAAQ,CAACC,MAAM,CAAC,IAAI,CAAC;IAEvC;EAGF;;EAEAC,QAAQ;IAEN,IAAI,CAACL,QAAQ,CAACM,WAAW,CAAC,IAAI,CAACJ,EAAE,CAAC,CAACK,SAAS,CAAC;MAC3CC,IAAI,EAAEC,IAAI,IAAG;QACX;QACA,IAAI,CAACC,IAAI,GAAGD,IAAI;MAClB,CAAC;MACDE,KAAK,EAAEC,GAAG,IAAG;QAACC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAAA;KAC/B,CAAC;EAEJ;EAEAG,MAAM,CAACC,IAAQ,EAAEC,KAAS,EAAEC,KAAS,EAAEC,MAAU,EAACC,KAAS,EAAEC,IAAQ,EAACC,CAAK;IACzE;IAEA,IAAIC,OAAO,GAAC;MAACJ,MAAM;MAACC,KAAK;MAACC;IAAI,CAAC;IAC/B,IAAIG,OAAO,GAAG;MAACR,IAAI;MAAEC,KAAK;MAAEC,KAAK;MAAEK;IAAO,CAAC;IAC3C;IAEE,IAAI,CAACvB,QAAQ,CAACyB,UAAU,CAAE,IAAI,CAACvB,EAAE,EAACsB,OAAO,CAAC,CAACjB,SAAS,EAAE;IACtD,IAAI,CAACN,MAAM,CAACyB,aAAa,CAAC,QAAQ,CAAC;IACnC;EAEJ;;;AA7CW7B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAA8B;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["UpdateUserComponent","constructor","myRoute","UService","router","ID","snapshot","params","ngOnInit","GetUserByID","subscribe","next","data","user","error","err","console","log","update","name","email","phone","street","suite","city","e","address","newUser","UpdateUser","navigateByUrl","selectors","decls","vars","template","encapsulation"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\update-user\\update-user.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UsersService } from 'src/app/services/users.service';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html',\n  styles: [\n  ]\n})\nexport class UpdateUserComponent implements OnInit {\n  // initialValue = {\n  //   name:,\n  //   email:,\n  //   phone:,\n  //   street:,\n  //   suite:,\n  //   city:\n  // };\n  \n  \n  ID:any;\n  user:any;\n  // @Input() student:any;\n  constructor(myRoute:ActivatedRoute,public UService: UsersService, public router:Router){\n    this.ID = myRoute.snapshot.params[\"id\"];\n\n    // console.log(myRoute.snapshot.params[\"id\"]);\n\n    \n  }\n \n  ngOnInit(): void {\n\n    this.UService.GetUserByID(this.ID).subscribe({\n      next:(data)=>{\n        // console.log(data)\n        this.user = data;\n      },\n      error:(err)=>{console.log(err)}\n    });\n\n  }\n  \n  update(name:any, email:any, phone:any, street:any,suite:any, city:any,e:any){\n    // console.log(e);\n    \n    let address={street,suite,city};\n    let newUser = {name, email, phone, address};\n    // if(this.myValidation.valid){\n\n      this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\")\n      // }\n      \n  }\n  \n  // myValidation=new FormGroup({\n    \n  //   name:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n  //   email:new FormControl(\"\",[Validators.required,Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n  //   phone:new FormControl(\"\",[Validators.required,Validators.pattern( /^[0-9]+$/)]),\n  //   street:new FormControl(\"\",Validators.required),\n  //   suite:new FormControl(\"\",Validators.required),\n  //   city:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    \n    \n  \n  // })\n  // get NameValid(){\n  //   if((this.myValidation.controls[\"name\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"name\"].valid))\n     \n  //   }\n  //    return true\n  // }\n  // get PhoneValid(){\n  //   if((this.myValidation.controls[\"phone\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"phone\"].valid))\n     \n  //   }\n  //    return true\n  // }\n  // get MailValid(){\n  //   if((this.myValidation.controls[\"email\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"email\"].valid))\n     \n  //   }\n  //    return true\n  // }\n  // get StreetValid(){\n  //   if((this.myValidation.controls[\"street\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"street\"].valid))\n     \n  //   }\n  //    return true\n  // }\n  // get SuiteValid(){\n  //   if((this.myValidation.controls[\"suite\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"suite\"].valid))\n     \n  //   }\n  //    return true\n  // }\n  // get CityValid(){\n  //   if((this.myValidation.controls[\"city\"].value!==\"\")){\n      \n  //     return ((this.myValidation.controls[\"city\"].valid))\n     \n  //   }\n  //    return true}\n  \n  }\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}