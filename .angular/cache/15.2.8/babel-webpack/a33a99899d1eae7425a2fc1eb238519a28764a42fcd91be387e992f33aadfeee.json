{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/services/users.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../header/header.component\";\nfunction UpdateUserComponent_div_2_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29);\n    i0.ɵɵtext(1, \" User Name not valid\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Email is Required and match it's pattern\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Phone is Required and must be Numbers only\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Street is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_div_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" Suite is Required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_div_35_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵtext(1, \" City is Required and must be characters only\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction UpdateUserComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3);\n    i0.ɵɵtext(2, \" Edit User \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 4)(4, \"div\", 5)(5, \"div\", 6)(6, \"form\", 7)(7, \"div\", 8)(8, \"label\", 9);\n    i0.ɵɵtext(9, \"Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"input\", 10, 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, UpdateUserComponent_div_2_div_12_Template, 2, 0, \"div\", 12);\n    i0.ɵɵelementStart(13, \"div\", 8)(14, \"label\", 13);\n    i0.ɵɵtext(15, \"Email-Address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"input\", 14, 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(18, UpdateUserComponent_div_2_div_18_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementStart(19, \"div\", 8)(20, \"label\", 17);\n    i0.ɵɵtext(21, \"Phone\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"input\", 18, 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(24, UpdateUserComponent_div_2_div_24_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementStart(25, \"div\", 8)(26, \"label\", 20);\n    i0.ɵɵtext(27, \"Address\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(28, \"input\", 21, 22)(30, \"input\", 23)(31, \"input\", 24, 25);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(33, UpdateUserComponent_div_2_div_33_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(34, UpdateUserComponent_div_2_div_34_Template, 2, 0, \"div\", 16);\n    i0.ɵɵtemplate(35, UpdateUserComponent_div_2_div_35_Template, 2, 0, \"div\", 16);\n    i0.ɵɵelementStart(36, \"div\", 26)(37, \"input\", 27);\n    i0.ɵɵlistener(\"click\", function UpdateUserComponent_div_2_Template_input_click_37_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const _r1 = i0.ɵɵreference(11);\n      const _r3 = i0.ɵɵreference(17);\n      const _r5 = i0.ɵɵreference(23);\n      const _r7 = i0.ɵɵreference(29);\n      const _r8 = i0.ɵɵreference(32);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.update(_r1.value, _r3.value, _r5.value, _r7.value, ctx_r12.suite.value, _r8.value, $event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(38, \"input\", 28);\n    i0.ɵɵelementEnd()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.myValidation);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.NameValid == false);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.MailValid == false);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.phone);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.PhoneValid == false);\n    i0.ɵɵadvance(4);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.address.street);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.address.suite);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r0.user.address.city);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.StreetValid == false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.SuiteValid == false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.CityValid == false);\n  }\n}\nexport class UpdateUserComponent {\n  // @Input() student:any;\n  constructor(myRoute, UService, router) {\n    this.UService = UService;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl(\"\", [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl(\"\", [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl(\"\", Validators.required),\n      suite: new FormControl(\"\", Validators.required),\n      city: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n    this.ID = myRoute.snapshot.params[\"id\"];\n    console.log(myRoute.snapshot.params[\"id\"]);\n  }\n  ngOnInit() {\n    this.UService.GetUserByID(this.ID).subscribe({\n      next: data => {\n        // console.log(data)\n        this.user = data;\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  update(name, email, phone, street, suite, city, e) {\n    // console.log(e);\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      this.UService.UpdateUser(this.ID, newUser).subscribe();\n      this.router.navigateByUrl(\"/users\");\n    }\n  }\n  get NameValid() {\n    if (this.myValidation.controls[\"name\"].value !== \"\") {\n      return this.myValidation.controls[\"name\"].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls[\"phone\"].value !== \"\") {\n      return this.myValidation.controls[\"phone\"].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls[\"email\"].value !== \"\") {\n      return this.myValidation.controls[\"email\"].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls[\"street\"].value !== \"\") {\n      return this.myValidation.controls[\"street\"].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls[\"suite\"].value !== \"\") {\n      return this.myValidation.controls[\"suite\"].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls[\"city\"].value !== \"\") {\n      return this.myValidation.controls[\"city\"].valid;\n    }\n    return true;\n  }\n}\nUpdateUserComponent.ɵfac = function UpdateUserComponent_Factory(t) {\n  return new (t || UpdateUserComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.UsersService), i0.ɵɵdirectiveInject(i1.Router));\n};\nUpdateUserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateUserComponent,\n  selectors: [[\"app-update-user\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[1, \"alert\", \"alert-info\", \"w-75\", \"m-auto\", 2, \"opacity\", \"50%\"], [\"class\", \"card w-75 m-auto mt-5\", 4, \"ngIf\"], [1, \"card\", \"w-75\", \"m-auto\", \"mt-5\"], [1, \"card-header\", \"text-center\", \"fs-4\"], [1, \"card-body\"], [1, \"row\"], [1, \"col\"], [1, \"form\", 3, \"formGroup\"], [1, \"form-group\", \"d-flex\", \"mt-2\"], [\"for\", \"name\", 1, \"col-3\"], [\"formControlName\", \"name\", \"id\", \"name\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"name\", \"\"], [\"class\", \"text-center mt-1 mb-1\", \"style\", \"color: red; \", 4, \"ngIf\"], [\"for\", \"email\", 1, \"col-3\"], [\"formControlName\", \"email\", \"id\", \"email\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"email\", \"\"], [\"class\", \"text-center\", \"style\", \"color: red;\", 4, \"ngIf\"], [\"for\", \"phone\", 1, \"col-3\"], [\"formControlName\", \"phone\", \"id\", \"phone\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"phone\", \"\"], [\"for\", \"address\", 1, \"col-3\"], [\"id\", \"street\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"street\", \"\"], [\"formControlName\", \"#suite\", \"id\", \"suite\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"formControlName\", \"city\", \"id\", \"city\", \"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"city\", \"\"], [1, \"form-group\", \"text-center\", \"mt-4\", \"d-flex\", \"justify-content-evenly\"], [\"type\", \"button\", \"value\", \"UPDATE\", 1, \"btn\", \"btn-outline-success\", 3, \"click\"], [\"type\", \"button\", \"value\", \"Cancel\", \"routerLink\", \"/users\", 1, \"btn\", \"btn-outline-success\"], [1, \"text-center\", \"mt-1\", \"mb-1\", 2, \"color\", \"red\"], [1, \"text-center\", 2, \"color\", \"red\"]],\n  template: function UpdateUserComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-header\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, UpdateUserComponent_div_2_Template, 39, 13, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.user);\n    }\n  },\n  dependencies: [i3.NgIf, i1.RouterLink, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i5.HeaderComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","i0","UpdateUserComponent","constructor","myRoute","UService","router","name","required","pattern","email","phone","street","suite","city","ID","snapshot","params","console","log","ngOnInit","GetUserByID","subscribe","next","data","user","error","err","update","e","address","newUser","myValidation","valid","UpdateUser","navigateByUrl","NameValid","controls","value","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\update-user\\update-user.component.ts","D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\update-user\\update-user.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { UsersService } from 'src/app/services/users.service';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-user',\n  templateUrl: './update-user.component.html',\n  styles: [\n  ]\n})\nexport class UpdateUserComponent implements OnInit {\n  ID:any;\n  user:any;\n  // @Input() student:any;\n  constructor(myRoute:ActivatedRoute,public UService: UsersService, public router:Router){\n    this.ID = myRoute.snapshot.params[\"id\"];\n\n    console.log(myRoute.snapshot.params[\"id\"]);\n\n    \n  }\n \n  ngOnInit(): void {\n\n    this.UService.GetUserByID(this.ID).subscribe({\n      next:(data)=>{\n        // console.log(data)\n        this.user = data;\n      },\n      error:(err)=>{console.log(err)}\n    });\n  }\n  update(name:any, email:any, phone:any, street:any,suite:any, city:any,e:any){\n    // console.log(e);\n    \n    let address={street,suite,city};\n    let newUser = {name, email, phone, address};\n    if(this.myValidation.valid){\n\n      this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\")\n      }\n  }\n  \n  myValidation=new FormGroup({\n    name:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n    email:new FormControl(\"\",[Validators.required,Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n    phone:new FormControl(\"\",[Validators.required,Validators.pattern( /^[0-9]+$/)]),\n    street:new FormControl(\"\",Validators.required),\n    suite:new FormControl(\"\",Validators.required),\n    city:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n  \n  })\n  get NameValid(){\n    if((this.myValidation.controls[\"name\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"name\"].valid))\n     \n    }\n     return true\n  }\n  get PhoneValid(){\n    if((this.myValidation.controls[\"phone\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"phone\"].valid))\n     \n    }\n     return true\n  }\n  get MailValid(){\n    if((this.myValidation.controls[\"email\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"email\"].valid))\n     \n    }\n     return true\n  }\n  get StreetValid(){\n    if((this.myValidation.controls[\"street\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"street\"].valid))\n     \n    }\n     return true\n  }\n  get SuiteValid(){\n    if((this.myValidation.controls[\"suite\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"suite\"].valid))\n     \n    }\n     return true\n  }\n  get CityValid(){\n    if((this.myValidation.controls[\"city\"].value!==\"\")){\n      \n      return ((this.myValidation.controls[\"city\"].valid))\n     \n    }\n     return true}\n  \n  }\n\n","<div class=\"alert alert-info   w-75 m-auto\" style=\"opacity: 50%;\">\n  <app-header></app-header>\n</div>\n\n  <div class=\"card w-75 m-auto mt-5\"   *ngIf=\"user\">\n    <div class=\"card-header text-center fs-4\">\n      Edit User\n    </div>\n    <div class=\"card-body\">\n      <div class=\"row\">\n        <div class=\"col\">\n          <form class=\"form\" [formGroup]=\"myValidation\" >\n            <div class=\"form-group d-flex mt-2\">\n              <label for=\"name\" class=\"col-3\">Name</label>\n              <input  formControlName=\"name\" #name id=\"name\" type=\"text\" class=\"form-control\" value=\"{{user.name}}\"/>\n            </div>\n                      <div class=\"text-center mt-1 mb-1\" *ngIf=\"NameValid ==false\" style=\"color: red; \"> User Name not valid</div>\n\n            <div class=\"form-group d-flex mt-2\">\n              <label for=\"email\" class=\"col-3\">Email-Address</label>\n              <input formControlName=\"email\" #email id=\"email\" type=\"text\" class=\"form-control\"  value=\"{{user.email}}\"  />\n            </div>\n                        <div class=\"text-center\" *ngIf=\" MailValid==false\" style=\"color: red;\"> Email is Required and match it's pattern</div>\n\n            <div class=\"form-group d-flex mt-2\">\n              <label for=\"phone\" class=\"col-3\">Phone</label>\n              <input formControlName=\"phone\" #phone id=\"phone\" type=\"text\" class=\"form-control\"  value=\"{{user.phone}}\" />\n            </div>\n                        <div class=\"text-center\" *ngIf=\"PhoneValid==false\" style=\"color: red;\"> Phone is Required and must be Numbers only</div>\n\n            <div class=\"form-group d-flex mt-2\">\n              <label for=\"address\" class=\"col-3\">Address</label>\n              <input  #street id=\"street\" type=\"text\" class=\"form-control\"    value=\"{{user.address.street}}\" />\n              <input formControlName= #suite id=\"suite\" type=\"text\" class=\"form-control\"    value=\"{{user.address.suite}}\" />\n              <input formControlName=\"city\" #city id=\"city\" type=\"text\" class=\"form-control\"   value=\"{{user.address.city}}\" />\n            </div>\n                        <div class=\"text-center\" *ngIf=\"StreetValid==false\" style=\"color: red;\">  Street is Required</div>\n            <div class=\"text-center\" *ngIf=\"SuiteValid==false\" style=\"color: red;\">  Suite is Required</div>\n            <div class=\"text-center\" *ngIf=\"CityValid==false\" style=\"color: red;\"> City is Required and must be characters only</div>\n\n           \n            <div class=\"form-group text-center mt-4 d-flex justify-content-evenly\">\n              <input type=\"button\" (click)=\"update(name.value, email.value, phone.value,street.value,suite.value,city.value,$event)\" value=\"UPDATE\" class=\"btn btn-outline-success\" />\n              <input type=\"button\"  class=\"btn btn-outline-success\" value=\"Cancel\" routerLink=\"/users\"/>\n  \n            </div>\n          </form>\n        </div>\n      </div>\n      \n    </div>\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}