{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UsersComponent = class UsersComponent {\n  constructor(myRoute, UService, router) {\n    this.myRoute = myRoute;\n    this.UService = UService;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl('', [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl('', [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl('', Validators.required),\n      suite: new FormControl('', Validators.required),\n      city: new FormControl('', [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n  }\n  ngOnInit() {\n    this.UService.GetAllUsers().subscribe({\n      next: data => {\n        // console.log(data)\n        this.users = data;\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  update(name, email, phone, street, suite, city, e) {\n    // console.log(e);\n    this.ID = this.myRoute.snapshot.params[\"id\"];\n    this.UService.GetUserByID(this.ID).subscribe({\n      next: data => {\n        // console.log(data)\n        this.user = data;\n        this.myValidation.setValue({\n          name: this.user.name,\n          email: this.user.email,\n          phone: this.user.phone,\n          street: this.user.address.street,\n          suite: this.user.address.suite,\n          city: this.user.address.city\n        });\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      this.user = newUser;\n      // this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\");\n    }\n  }\n  add(name, email, phone, street, suite, city) {\n    // console.log(this.users);\n    let id = this.users[this.users.length - 1].id + 1;\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      id,\n      name,\n      email,\n      phone,\n      address\n    };\n    if (this.myValidation.valid) {\n      // this.myEvent.emit(newUser)\n      this.users.push(newUser);\n      // this.UService. AddUser(newUser).subscribe();\n      this.router.navigateByUrl('/users');\n    }\n  }\n  get NameValid() {\n    if (this.myValidation.controls['name'].value !== '') {\n      return this.myValidation.controls['name'].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls['phone'].value !== '') {\n      return this.myValidation.controls['phone'].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls['email'].value !== '') {\n      return this.myValidation.controls['email'].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls['street'].value !== '') {\n      return this.myValidation.controls['street'].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls['suite'].value !== '') {\n      return this.myValidation.controls['suite'].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls['city'].value !== '') {\n      return this.myValidation.controls['city'].valid;\n    }\n    return true;\n  }\n};\nUsersComponent = __decorate([Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styles: []\n})], UsersComponent);\nexport { UsersComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UsersComponent","constructor","myRoute","UService","router","name","required","pattern","email","phone","street","suite","city","ngOnInit","GetAllUsers","subscribe","next","data","users","error","err","console","log","update","e","ID","snapshot","params","GetUserByID","user","myValidation","setValue","address","newUser","valid","navigateByUrl","add","id","length","push","NameValid","controls","value","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selector","templateUrl","styles"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\users\\users.component.ts"],"sourcesContent":["import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UsersService } from 'src/app/services/users.service';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styles: [\n  ]\n})\nexport class UsersComponent implements OnInit {\n  ID:any;\n  user:any;\n  constructor(public myRoute:ActivatedRoute, public UService:UsersService,public router: Router){}\n    users:any;\n  ngOnInit(): void {\n        this.UService.GetAllUsers().subscribe({\n      next:(data)=>{\n        // console.log(data)\n        this.users = data;\n      },\n      error:(err)=>{console.log(err)}\n    })\n  }\n  update(name:any, email:any, phone:any, street:any,suite:any, city:any,e:any){\n    // console.log(e);\n    this.ID = this.myRoute.snapshot.params[\"id\"];\n\n    this.UService.GetUserByID(this.ID).subscribe({\n      next:(data:Object)=>{\n        // console.log(data)\n        this.user = data;\n        this.myValidation.setValue({\n          name: this.user.name,\n          email: this.user.email,\n          phone: this.user.phone,\n          street: this.user.address.street,\n          suite: this.user.address.suite,\n          city: this.user.address.city\n        });\n\n      },\n      error:(err)=>{console.log(err)}\n    });\n    let address={street,suite,city};\n    let newUser = {name, email, phone, address};\n    if(this.myValidation.valid){\n        this.user=newUser\n      // this.UService.UpdateUser( this.ID,newUser).subscribe();\n      this.router.navigateByUrl(\"/users\")\n      }\n\n      \n  }\n\n\n\n\n\n  \n  add(name: any, email: any, phone: any, street: any, suite: any, city: any) {\n    // console.log(this.users);\n\n  let id=(this.users[this.users.length-1].id) +1\n\n    let address = { street, suite, city };\n    let newUser = {id,name, email, phone, address };\n    if (this.myValidation.valid) {\n      // this.myEvent.emit(newUser)\n      this.users.push(newUser);\n      \n      // this.UService. AddUser(newUser).subscribe();\n      this.router.navigateByUrl('/users');\n    }\n  }\n\n\n\n\n\n\n  myValidation = new FormGroup({\n    name: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/[a-zA-Z]+/),\n    ]),\n    email: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/),\n    ]),\n    phone: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/^[0-9]+$/),\n    ]),\n    street: new FormControl('', Validators.required),\n    suite: new FormControl('', Validators.required),\n    city: new FormControl('', [\n      Validators.required,\n      Validators.pattern(/[a-zA-Z]+/),\n    ]),\n  });\n  get NameValid() {\n    if (this.myValidation.controls['name'].value !== '') {\n      return this.myValidation.controls['name'].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls['phone'].value !== '') {\n      return this.myValidation.controls['phone'].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls['email'].value !== '') {\n      return this.myValidation.controls['email'].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls['street'].value !== '') {\n      return this.myValidation.controls['street'].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls['suite'].value !== '') {\n      return this.myValidation.controls['suite'].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls['city'].value !== '') {\n      return this.myValidation.controls['city'].valid;\n    }\n    return true;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}