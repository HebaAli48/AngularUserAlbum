{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(DService, FormBuilder, http, router) {\n    this.DService = DService;\n    this.http = http;\n    this.router = router;\n    this.myValidation = new FormGroup({\n      name: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\n      email: new FormControl(\"\", [Validators.required, Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\n      phone: new FormControl(\"\", [Validators.required, Validators.pattern(/^[0-9]+$/)]),\n      street: new FormControl(\"\", Validators.required),\n      suite: new FormControl(\"\", Validators.required),\n      city: new FormControl(\"\", [Validators.required, Validators.pattern(/[a-zA-Z]+/)])\n    });\n  }\n  // Set the userDatavariable in the DataService\n  ngOnInit() {}\n  add(name, email, phone, street, suite, city) {\n    let address = {\n      street,\n      suite,\n      city\n    };\n    let newUser = {\n      name,\n      email,\n      phone,\n      address\n    };\n    this.http.get(\"https://jsonplaceholder.typicode.com/users\").subscribe(res => {\n      const user = res.find(a => {\n        return a.name === this.myValidation.value.name && a.email === this.myValidation.value.email;\n      });\n      console.log(user);\n      if (user) {\n        // if(this.loginForm.value.name==\"Leanne Graham\"&&this.loginForm.value.email==\"Sincere@april.biz\"){\n        //   alert (\"Login Success WELCOME ADMIN ^_^\");\n        //   this.loginForm.reset();\n        //   this.router.navigate(['users'])\n        // }\n        // else{\n        alert(\"user is already exists ,please login Again\");\n        // this.loginForm.reset();\n        this.router.navigate(['login']);\n      }\n      // else if(this.myValidation.value.name==\"\"||this.loginForm.value.email==\"\" ){\n      //   alert (\" Name and email are required !! please login again\");\n      //   this.router.navigateByUrl(\"/login\");\n      // }\n      else {\n        alert(\"welcome New User  !! please signin\");\n        this.router.navigateByUrl(\"/login\");\n      }\n    }, err => {\n      alert(\"Something Went Wrong !!\");\n    });\n    if (this.myValidation.valid) {\n      this.DService.userData.name = newUser.name;\n      this.DService.userData.email = newUser.email;\n      this.DService.userData.phone = newUser.phone;\n      this.DService.userData.address.street = newUser.name.adress.street;\n      this.DService.userData.address.suite = newUser.name.adress.suite;\n      this.DService.userData.address.city = newUser.name.adress.city;\n    }\n    this.router.navigateByUrl(\"/login\");\n  }\n  get NameValid() {\n    if (this.myValidation.controls[\"name\"].value !== \"\") {\n      return this.myValidation.controls[\"name\"].valid;\n    }\n    return true;\n  }\n  get PhoneValid() {\n    if (this.myValidation.controls[\"phone\"].value !== \"\") {\n      return this.myValidation.controls[\"phone\"].valid;\n    }\n    return true;\n  }\n  get MailValid() {\n    if (this.myValidation.controls[\"email\"].value !== \"\") {\n      return this.myValidation.controls[\"email\"].valid;\n    }\n    return true;\n  }\n  get StreetValid() {\n    if (this.myValidation.controls[\"street\"].value !== \"\") {\n      return this.myValidation.controls[\"street\"].valid;\n    }\n    return true;\n  }\n  get SuiteValid() {\n    if (this.myValidation.controls[\"suite\"].value !== \"\") {\n      return this.myValidation.controls[\"suite\"].valid;\n    }\n    return true;\n  }\n  get CityValid() {\n    if (this.myValidation.controls[\"city\"].value !== \"\") {\n      return this.myValidation.controls[\"city\"].valid;\n    }\n    return true;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","DService","FormBuilder","http","router","name","required","pattern","email","phone","street","suite","city","ngOnInit","add","address","newUser","get","subscribe","res","user","find","a","myValidation","value","console","log","alert","navigate","navigateByUrl","err","valid","userData","adress","NameValid","controls","PhoneValid","MailValid","StreetValid","SuiteValid","CityValid","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators,FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport {UsersService } from 'src/app/services/users.service';\r\nimport {DataService } from 'src/app/services/data.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  constructor(public DService: DataService, FormBuilder, private http : HttpClient, public router:Router){}\r\n    // Set the userDatavariable in the DataService\r\n     \r\n    ngOnInit(): void {\r\n \r\n\r\n  }\r\n   add(name:any, email:any, phone:any, street:any,suite:any, city:any ){\r\n        let address={street,suite,city};\r\n          let newUser= {name, email, phone, address};\r\n                         \r\n          this.http.get<any>(\"https://jsonplaceholder.typicode.com/users\")\r\n          .subscribe(res=>{\r\n            const user = res.find((a:any)=>{\r\n              return a.name === this.myValidation.value.name &&  a.email === this.myValidation.value.email\r\n            })\r\n            console.log(user);\r\n            \r\n            if(user){\r\n              // if(this.loginForm.value.name==\"Leanne Graham\"&&this.loginForm.value.email==\"Sincere@april.biz\"){\r\n              //   alert (\"Login Success WELCOME ADMIN ^_^\");\r\n              //   this.loginForm.reset();\r\n              //   this.router.navigate(['users'])\r\n              // }\r\n              // else{\r\n                alert (\"user is already exists ,please login Again\");\r\n              // this.loginForm.reset();\r\n              this.router.navigate(['login'])}\r\n              \r\n            \r\n            // else if(this.myValidation.value.name==\"\"||this.loginForm.value.email==\"\" ){\r\n            //   alert (\" Name and email are required !! please login again\");\r\n            //   this.router.navigateByUrl(\"/login\");\r\n            \r\n            // }\r\n            else {\r\n      \r\n              alert (\"welcome New User  !! please signin\");\r\n              this.router.navigateByUrl(\"/login\");\r\n            }\r\n          },err=>{\r\n            alert (\"Something Went Wrong !!\")\r\n          })\r\n          if(this.myValidation.valid){\r\n            this.DService.userData.name = newUser.name;\r\n            this.DService.userData.email = newUser.email;\r\n            this.DService.userData.phone = newUser.phone;\r\n            this.DService.userData.address.street = newUser.name.adress.street\r\n            this.DService.userData.address.suite = newUser.name.adress.suite\r\n            this.DService.userData.address.city = newUser.name.adress.city\r\n          }\r\n          this.router.navigateByUrl(\"/login\")\r\n                 }\r\nmyValidation=new FormGroup({\r\n  name:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)]),\r\n  email:new FormControl(\"\",[Validators.required,Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/)]),\r\n  phone:new FormControl(\"\",[Validators.required,Validators.pattern( /^[0-9]+$/)]),\r\n  street:new FormControl(\"\",Validators.required),\r\n  suite:new FormControl(\"\",Validators.required),\r\n  city:new FormControl(\"\",[Validators.required, Validators.pattern(/[a-zA-Z]+/)])\r\n\r\n})\r\nget NameValid(){\r\n  if((this.myValidation.controls[\"name\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"name\"].valid))\r\n   \r\n  }\r\n   return true\r\n}\r\nget PhoneValid(){\r\n  if((this.myValidation.controls[\"phone\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"phone\"].valid))\r\n   \r\n  }\r\n   return true\r\n}\r\nget MailValid(){\r\n  if((this.myValidation.controls[\"email\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"email\"].valid))\r\n   \r\n  }\r\n   return true\r\n}\r\nget StreetValid(){\r\n  if((this.myValidation.controls[\"street\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"street\"].valid))\r\n   \r\n  }\r\n   return true\r\n}\r\nget SuiteValid(){\r\n  if((this.myValidation.controls[\"suite\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"suite\"].valid))\r\n   \r\n  }\r\n   return true\r\n}\r\nget CityValid(){\r\n  if((this.myValidation.controls[\"city\"].value!==\"\")){\r\n    \r\n    return ((this.myValidation.controls[\"city\"].valid))\r\n   \r\n  }\r\n   return true}\r\n\r\n  \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}