{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, http, router) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      name: [''],\n      email: ['']\n    });\n  }\n  login() {\n    this.http.get(\"http://localhost:3000/users\").subscribe(res => {\n      const user = res.find(a => {\n        return a.name === this.loginForm.value.name && a.email === this.loginForm.value.email;\n      });\n      console.log(user);\n      if (user) {\n        if (this.loginForm.value.name == \"Leanne Graham\" && this.loginForm.value.email == \"Sincere@april.biz\") {\n          alert(\"Login Success WELCOME ADMIN ^_^\");\n          this.loginForm.reset();\n          this.router.navigate(['users']);\n        } else {\n          alert(\"Login Success !!\");\n          this.loginForm.reset();\n          this.router.navigate(['user']);\n        }\n      } else if (this.loginForm.value.name == \"\" || this.loginForm.value.email == \"\") {\n        alert(\" Name and email are required !! please login again\");\n        this.router.navigateByUrl(\"/login\");\n      } else {\n        alert(\"User Not Found !! please signup\");\n        this.router.navigateByUrl(\"/register\");\n      }\n    }, err => {\n      alert(\"Something Went Wrong !!\");\n    });\n  }\n  onSubmit(form) {\n    const user = {\n      name: form.value.name,\n      email: form.value.email\n    };\n    this.http.get('http://localhost:3000/users').subscribe(res => {\n      console.log(res);\n      form.reset();\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAa1C,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAEzBC,YAAqBC,WAAyB,EAAUC,IAAiB,EAAUC,MAAe;IAA7E,gBAAW,GAAXF,WAAW;IAAwB,SAAI,GAAJC,IAAI;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEpGC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,IAAI,EAAG,CAAC,EAAE,CAAC;MACXC,KAAK,EAAG,CAAC,EAAE;KACZ,CAAC;EACJ;EAEAC,KAAK;IACH,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAM,6BAA6B,CAAC,CAChDC,SAAS,CAACC,GAAG,IAAE;MACd,MAAMC,IAAI,GAAGD,GAAG,CAACE,IAAI,CAAEC,CAAK,IAAG;QAC7B,OAAOA,CAAC,CAACR,IAAI,KAAK,IAAI,CAACF,SAAS,CAACW,KAAK,CAACT,IAAI,IAAKQ,CAAC,CAACP,KAAK,KAAK,IAAI,CAACH,SAAS,CAACW,KAAK,CAACR,KAAK;MACxF,CAAC,CAAC;MACFS,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;MAEjB,IAAGA,IAAI,EAAC;QACN,IAAG,IAAI,CAACR,SAAS,CAACW,KAAK,CAACT,IAAI,IAAE,eAAe,IAAE,IAAI,CAACF,SAAS,CAACW,KAAK,CAACR,KAAK,IAAE,mBAAmB,EAAC;UAC7FW,KAAK,CAAE,iCAAiC,CAAC;UACzC,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;UACtB,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;SAChC,MACG;UACFF,KAAK,CAAE,kBAAkB,CAAC;UAC5B,IAAI,CAACd,SAAS,CAACe,KAAK,EAAE;UACtB,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;;OAE/B,MACI,IAAG,IAAI,CAAChB,SAAS,CAACW,KAAK,CAACT,IAAI,IAAE,EAAE,IAAE,IAAI,CAACF,SAAS,CAACW,KAAK,CAACR,KAAK,IAAE,EAAE,EAAE;QACrEW,KAAK,CAAE,oDAAoD,CAAC;QAC5D,IAAI,CAAChB,MAAM,CAACmB,aAAa,CAAC,QAAQ,CAAC;OACpC,MACI;QAEHH,KAAK,CAAE,iCAAiC,CAAC;QACzC,IAAI,CAAChB,MAAM,CAACmB,aAAa,CAAC,WAAW,CAAC;;IAK1C,CAAC,EAACC,GAAG,IAAE;MACLJ,KAAK,CAAE,yBAAyB,CAAC;IACnC,CAAC,CAAC;EACJ;EAEAK,QAAQ,CAACC,IAAY;IACnB,MAAMZ,IAAI,GAAG;MACXN,IAAI,EAAEkB,IAAI,CAACT,KAAK,CAACT,IAAI;MACrBC,KAAK,EAAEiB,IAAI,CAACT,KAAK,CAACR;KACnB;IAED,IAAI,CAACN,IAAI,CAACQ,GAAG,CAAC,6BAA6B,CAAC,CACzCC,SAAS,CAACC,GAAG,IAAG;MACfK,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;MAChBa,IAAI,CAACL,KAAK,EAAE;IACd,CAAC,CAAC;EACN;CAED;AA7DYrB,cAAc,eAL1BD,SAAS,CAAC;EACT4B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACW7B,cAAc,CA6D1B;SA7DYA,cAAc","names":["Component","LoginComponent","constructor","formBuilder","http","router","ngOnInit","loginForm","group","name","email","login","get","subscribe","res","user","find","a","value","console","log","alert","reset","navigate","navigateByUrl","err","onSubmit","form","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\iti mern\\9-angular\\project\\AngularTask\\src\\app\\components\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { NgForm } from '@angular/forms';\nimport { style } from '@angular/animations';\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit{\n  public loginForm !: FormGroup;\n  constructor (private formBuilder : FormBuilder, private http : HttpClient, private router : Router){}\n\n  ngOnInit(): void {\n    this.loginForm = this.formBuilder.group({\n      name : [''],\n      email : ['']\n    })\n  }\n\n  login(){\n    this.http.get<any>(\"http://localhost:3000/users\")\n    .subscribe(res=>{\n      const user = res.find((a:any)=>{\n        return a.name === this.loginForm.value.name &&  a.email === this.loginForm.value.email\n      })\n      console.log(user);\n      \n      if(user){\n        if(this.loginForm.value.name==\"Leanne Graham\"&&this.loginForm.value.email==\"Sincere@april.biz\"){\n          alert (\"Login Success WELCOME ADMIN ^_^\");\n          this.loginForm.reset();\n          this.router.navigate(['users'])\n        }\n        else{\n          alert (\"Login Success !!\");\n        this.loginForm.reset();\n        this.router.navigate(['user'])}\n        \n      }\n      else if(this.loginForm.value.name==\"\"||this.loginForm.value.email==\"\" ){\n        alert (\" Name and email are required !! please login again\");\n        this.router.navigateByUrl(\"/login\")\n      }\n      else {\n\n        alert (\"User Not Found !! please signup\");\n        this.router.navigateByUrl(\"/register\")\n\n\n\n      }\n    },err=>{\n      alert (\"Something Went Wrong !!\")\n    })\n  }\n\n  onSubmit(form: NgForm) {\n    const user = {\n      name: form.value.name,\n      email: form.value.email,\n    };\n\n    this.http.get('http://localhost:3000/users')\n      .subscribe(res => {\n        console.log(res);\n        form.reset();\n      });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}